name: Build and Test with MySQL

on:
  push:
    branches: [ main ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: FakeStoreIngestor

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: fakestore
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      # Mock "FakeStore" upstream to avoid Cloudflare blocks in CI
      fakestore-mock:
        image: clue/json-server:latest
        ports: [ "3000:80" ]
        # Mount our db.json into the container and tell json-server to use it
        options: >-
          --mount type=bind,source=${{ github.workspace }}/.github/mock/db.json,target=/data/db.json,readonly
          --health-cmd="wget -qO- http://localhost:80/products > /dev/null"
          --health-interval=5s --health-timeout=3s --health-retries=10

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup .NET SDK (match your projectâ€™s version)
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Build
      - name: Build
        run: dotnet build --no-restore --configuration Release

      # Wait for MySQL to be ready
      - name: Wait for MySQL
        run: |
          for i in {1..30}; do
            if mysqladmin ping -h127.0.0.1 -P3306 -uappuser -papppass --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Smoke check mock upstream
        run: curl -sS http://localhost:3000/products | head -c 200

      # # Run EF Core migrations (if you use them)
      # - name: Apply database migrations
      #   env:
      #     ConnectionStrings__Default: Server=127.0.0.1;Port=3306;Database=fakestore;User=appuser;Password=apppass;TreatTinyAsBoolean=false
      #   run: dotnet ef database update --project FakeStoreIngestor

      # # Run tests
      # - name: Test
      #   env:
      #     ConnectionStrings__Default: Server=127.0.0.1;Port=3306;Database=fakestore;User=appuser;Password=apppass;TreatTinyAsBoolean=false
      #   run: dotnet test --no-build --verbosity normal

      - name: Test
        env:
          ConnectionStrings__Default: Server=127.0.0.1;Port=3306;Database=fakestore;User=appuser;Password=apppass;TreatTinyAsBoolean=false;DefaultCommandTimeout=30
          Ingest__BaseUrl: http://localhost:3000/
          Ingest__ProductsEndpoint: products
        run: dotnet test --no-build --verbosity normal

      # # Start the API in background
      # - name: Run API in background
      #   run: |
      #     dotnet run --project FakeStoreIngestor --urls "http://localhost:5171" &
      #     echo $! > api.pid
      #     # wait for it to start
      #     for i in {1..20}; do
      #       if curl -s http://localhost:5171/health > /dev/null; then
      #         echo "API is up!"
      #         break
      #       fi
      #       echo "Waiting for API..."
      #       sleep 2
      #     done

      # # Start the API in background on a fixed port
      # - name: Run API in background
      #   env:
      #     ASPNETCORE_URLS: http://localhost:5171
      #   run: |
      #     dotnet run --configuration Release &
      #     echo $! > api.pid
      #     # Wait for API to be healthy
      #     for i in {1..30}; do
      #       if curl -s http://localhost:5171/health > /dev/null; then
      #         echo "API is up!"
      #         break
      #       fi
      #       echo "Waiting for API..."
      #       sleep 2
      #     done

      # Start API on a fixed port and point it to services via env vars
      - name: Run API in background
        env:
          ASPNETCORE_URLS: http://localhost:5171
          # MySQL connection string
          ConnectionStrings__Default: Server=127.0.0.1;Port=3306;Database=fakestore;User=appuser;Password=apppass;TreatTinyAsBoolean=false;DefaultCommandTimeout=30
          # IMPORTANT: override upstream only in CI (mock server)
          Ingest__BaseUrl: http://localhost:3000/
          Ingest__ProductsEndpoint: products
        run: |
          dotnet run --project FakeStoreIngestor --configuration Release &
          echo $! > api.pid
          # Wait for API health
          for i in {1..30}; do
            if curl -sf http://localhost:5171/health > /dev/null; then
              echo "API is up!"
              break
            fi
            echo "Waiting for API..."
            sleep 2
          done

      # - name: Check upstream fakestore reachability
      #   run: |
      #     set -e
      #     curl -v -I https://fakestoreapi.com/products || true

      # Import first 5 products
      - name: Import first 5
        run: |
          curl -v -X POST 'http://localhost:5171/import/5' -H 'accept: */*'

      - name: Read one
        run: |
          curl -v -X GET 'http://localhost:5171/products/1' -H 'accept: */*'


      - name: List all
        run: |
          curl -v -X GET 'http://localhost:5171/products' -H 'accept: */*'

      # Kill API after seeding
      - name: Stop API
        if: always()
        run: kill $(cat api.pid)


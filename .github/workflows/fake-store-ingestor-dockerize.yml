name: Dockerize and Test with MySQL

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: dotnet.FakeStoreIngestor

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpass
          MYSQL_DATABASE: fakestore
          MYSQL_USER: appuser
          MYSQL_PASSWORD: apppass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -prootpass"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET 8 SDK (for restore/test tooling)
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      # Optional: prove MySQL is reachable
      - name: Wait for MySQL
        run: |
          for i in {1..40}; do
            if mysqladmin ping -h 127.0.0.1 -P 3306 -u appuser -p apppass --silent; then
              echo "MySQL is up!"
              break
            fi
            echo "Waiting for MySQL..."
            sleep 2
          done

      # Mock upstream so CI is deterministic
      - name: Create mock db.json
        run: |
          mkdir -p .github/mock
          cat > .github/mock/db.json <<'JSON'
          {
            "products": [
              { "id": 1, "title": "Mock 1", "price": 10, "description": "d", "category": "c", "image": "i", "rating": { "rate": 4.2, "count": 10 } },
              { "id": 2, "title": "Mock 2", "price": 20, "description": "d", "category": "c", "image": "i", "rating": { "rate": 3.9, "count": 5 } },
              { "id": 3, "title": "Mock 3", "price": 30, "description": "d", "category": "c", "image": "i", "rating": { "rate": 4.8, "count": 7 } },
              { "id": 4, "title": "Mock 4", "price": 40, "description": "d", "category": "c", "image": "i", "rating": { "rate": 4.1, "count": 3 } },
              { "id": 5, "title": "Mock 5", "price": 50, "description": "d", "category": "c", "image": "i", "rating": { "rate": 3.5, "count": 12 } },
              { "id": 6, "title": "Mock 6", "price": 60, "description": "d", "category": "c", "image": "i", "rating": { "rate": 4.9, "count": 2 } }
            ]
          }
          JSON

      - name: Start mock upstream (json-server via npx)
        run: |
          npx --yes json-server --host 0.0.0.0 --port 3000 .github/mock/db.json &
          echo $! > mock.pid
          for i in {1..40}; do
            if curl -sf http://localhost:3000/products > /dev/null; then
              echo "Mock is up!"
              break
            fi
            echo "Waiting for mock..."
            sleep 1
          done

      - name: Smoke check mock upstream
        run: curl -sS http://localhost:3000/products | head -c 200

      # Build Docker image (adjust Dockerfile path if your csproj lives in a subfolder)
      - name: Build API image
        run: |
          docker build -t fakestore-api \
            -f Dockerfile \
            .

      # Run API container on host network so it can reach mysql+mock via localhost
      - name: Run API container
        env:
          # App env vars
          ASPNETCORE_URLS: http://0.0.0.0:5171
          ConnectionStrings__Default: Server=127.0.0.1;Port=3306;Database=fakestore;User=appuser;Password=apppass;TreatTinyAsBoolean=false;DefaultCommandTimeout=30
          Ingest__BaseUrl: http://localhost:3000/
          Ingest__ProductsEndpoint: products
        run: |
          docker run -d --name fakestore-api \
            --network host \
            -e ASPNETCORE_URLS="$ASPNETCORE_URLS" \
            -e ConnectionStrings__Default="$ConnectionStrings__Default" \
            -e Ingest__BaseUrl="$Ingest__BaseUrl" \
            -e Ingest__ProductsEndpoint="$Ingest__ProductsEndpoint" \
            fakestore-api

          # Wait for API health
          for i in {1..40}; do
            if curl -sf http://localhost:5171/health > /dev/null; then
              echo "API is up!"
              break
            fi
            echo "Waiting for API..."
            sleep 2
            if [ $i -eq 40 ]; then
              echo "API failed to start; printing container logs"
              docker logs fakestore-api || true
              exit 1
            fi
          done

      - name: Import first 5
        run: |
          curl -sS -X POST 'http://localhost:5171/import/5' -H 'accept: */*'

      - name: Read one
        run: |
          curl -sS 'http://localhost:5171/products/1' | jq . || true

      - name: List all
        run: |
          curl -sS 'http://localhost:5171/products' | jq '.[0:5]' || true

      - name: Stop containers & processes
        if: always()
        run: |
          docker logs fakestore-api || true
          docker rm -f fakestore-api || true
          kill $(cat mock.pid) || true
